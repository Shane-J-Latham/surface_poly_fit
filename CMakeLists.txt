
CMAKE_MINIMUM_REQUIRED(VERSION 3.21)

IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

enable_language(CXX)
if (NOT CXX_STANDARD)
  set(CXX_STANDARD C++11)
endif()

MESSAGE(STATUS "Finding Python...")
FIND_PACKAGE(Python COMPONENTS Interpreter Development.Module REQUIRED)

if(DEFINED CMAKE_TOOLCHAIN_FILE) # Print toolchain information
  message(STATUS "Using toolchain: ${CMAKE_TOOLCHAIN_FILE}")
elseif(DEFINED ENV{CMAKE_TOOLCHAIN_FILE})
  message(STATUS "Using toolchain: $ENV{CMAKE_TOOLCHAIN_FILE}")
  set(CMAKE_TOOLCHAIN_FILE
    "$ENV{CMAKE_TOOLCHAIN_FILE}"
    CACHE FILEPATH ""
  )
elseif(DEFINED ENV{VCPKG_ROOT})
  message(STATUS "Using vcpkg installed in $ENV{VCPKG_ROOT}")
  set(CMAKE_TOOLCHAIN_FILE
    "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
    CACHE FILEPATH ""
  )
elseif(CMAKE_FETCH_VCPKG OR DEFINED ENV{CMAKE_FETCH_VCPKG})
  message(STATUS "Fetching vcpkg")
  include(FetchContent)
  FetchContent_Declare(vcpkg
    GIT_REPOSITORY https://github.com/microsoft/vcpkg/
    GIT_TAG 2023.12.12
  )
  FetchContent_MakeAvailable(vcpkg)
  set(CMAKE_TOOLCHAIN_FILE
    "${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake"
    CACHE FILEPATH ""
  )
  message(STATUS "Fetching vcpkg -- done")
else()
  message(STATUS "No VCPKG_ROOT or CMAKE_TOOLCHAIN_FILE defined, skipping vcpkg use.")
endif()

PROJECT(surface_poly_fit)

MESSAGE(STATUS "Finding OpenMP...")
FIND_PACKAGE(OpenMP)
MESSAGE(STATUS "Finding pybind11...")
FIND_PACKAGE(pybind11 CONFIG REQUIRED)
MESSAGE(STATUS "Finding PythonExtensions...")
SET(Python_ADDITIONAL_VERSIONS "${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}")
FIND_PACKAGE(PythonExtensions REQUIRED)

# Enable CTest testing ('make test' target for makefile generator).
ENABLE_TESTING()

MESSAGE(STATUS "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")

IF ( OpenMP_CXX_FOUND )
  ADD_COMPILE_DEFINITIONS(SPF_HAVE_OPENMP=1)
ENDIF()

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
SET(CGAL_HEADER_ONLY ON)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCGAL_EIGEN3_ENABLED -DCGAL_HEADER_ONLY")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} -g")
SET(CMAKE_VERBOSE_MAKEFILE ON)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIR})

SET(
  PYTHON_SITE_PACKAGES_INSTALL_DIR
  ${CMAKE_INSTALL_PREFIX}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages
)
SET(
  PCSR_PYTHON_SITE_PACKAGES_INSTALL_DIR
  ${PYTHON_SITE_PACKAGES_INSTALL_DIR}/surface_poly_fit
)

IF (NOT DEFINED WITH_TBB)
  SET(WITH_TBB "ON")
ENDIF()

IF (WITH_TBB)
  FIND_PACKAGE(TBB)
  IF ( TBB_FOUND )
    INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIR})
    # SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCGAL_LINKED_WITH_TBB")
  ENDIF()
ENDIF()

FIND_PACKAGE(Eigen3 3.1.0)
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})

SET(CGAL_COMPONENTS "")
MESSAGE(STATUS "Finding CGAL with components=${CGAL_COMPONENTS}...")
#FIND_PACKAGE(CGAL COMPONENTS ${CGAL_COMPONENTS})
FIND_PACKAGE(CGAL)

ADD_SUBDIRECTORY(src)

IF (NOT DEFINED SKBUILD)
  INSTALL(
    DIRECTORY surface_poly_fit
    DESTINATION ${PYTHON_SITE_PACKAGES_INSTALL_DIR}
  )
ENDIF()
